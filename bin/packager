#!/usr/bin/env node

const args = (() => {
	const Argparse = require('argparse')

	const parser = new Argparse.ArgumentParser({
		description: "zip up a node aplication",
		add_help: true, // eslint-disable-line camelcase
	})

	parser.add_argument('-v', '--version', {
		action: 'version',
		version: `${parser.prog} v${require('../package.json').version}`,
		help: "Print version and exit",
	})

	parser.add_argument('-i', '--in-dir', {
		help: "The directory to bundle up (default: cwd)",
	})

	parser.add_argument('-I', '--include', {
		help: "Pattern of files to include (default: **/*)",
	})

	parser.add_argument('-o', '--out-dir', {
		help: "Directory to place output file in (default: cwd)",
	})

	parser.add_argument('-n', '--out-name', {
		help: "Name of output file (default: name-version-platform.zip)",
	})

	parser.add_argument('-t', '--target', {
		help: "Node binary version to use (default: current)",
	})

	parser.add_argument('-p', '--platform', {
		help: "Target platform for the bundle (default: current)",
	})

	return parser.parse_args()
})()


const { pack } = require('../src')
const Fs = require('fs')
const Path = require('path')

const dir = Path.resolve(args.in_dir ?? '.')
const jsonPath = Path.join(dir, 'package.json')

const packageJson = JSON.parse(Fs.readFileSync(jsonPath))

const project = {
	path: dir,
	name: Path.basename(packageJson.name),
	version: packageJson.version,
	files: args.include ? JSON.parse(args.include) : null,
}

const target = {
	version: args.target,
	platform: args.platform,
	name: args.out_name,
	dir: args.out_dir,
}

pack({ project, target })
