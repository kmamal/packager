#!/usr/bin/env node

const args = (() => {
	const Argparse = require('argparse')

	const parser = new Argparse.ArgumentParser({
		description: "zip up a node aplication",
		add_help: true, // eslint-disable-line camelcase
	})

	parser.add_argument('-v', '--version', {
		action: 'version',
		version: `${parser.prog} v${require('../package.json').version}`,
		help: "Print version and exit",
	})

	parser.add_argument('-i', '--in-dir', {
		help: "The directory to bundle up (default: cwd)",
	})

	parser.add_argument('-I', '--include', {
		help: "Pattern of files to include (default: **/*)",
		action: 'append',
	})

	parser.add_argument('-f', '--flag', {
		help: "A flag that should be passed to Node.js",
		default: [],
		action: 'append',
	})

	parser.add_argument('-o', '--out-dir', {
		help: "Directory to place output file in (default: cwd)",
	})

	parser.add_argument('-n', '--out-name', {
		help: "Name of output file (default: name-version-platform.zip)",
	})

	parser.add_argument('-t', '--target', {
		help: "Node binary version to use (default: current)",
	})

	parser.add_argument('-p', '--platform', {
		help: "Target platform for the bundle (default: current)",
	})

	parser.add_argument('-u', '--unzip', {
		help: "Don't zip up the bundled folder",
		default: false,
		action: 'store_true',
	})

	return parser.parse_args()
})()


const { pack } = require('../src')

pack({
	project: {
		path: args.in_dir,
		files: args.include,
	},
	target: {
		version: args.target,
		platform: args.platform,
		name: args.out_name,
		dir: args.out_dir,
		flags: args.flag,
		shouldZip: !args.unzip,
	},
})
